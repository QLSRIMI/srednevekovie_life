import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤–∞–ª—é—Ç—ã
class Item:
    def __init__(self, name: str, description: str, item_type: str):
        self.name = name
        self.description = description
        self.item_type = item_type

class Currency:
    def __init__(self, gold: int = 0, silver: int = 0, bronze: int = 0):
        self.bronze = bronze
        self.silver = silver
        self.gold = gold

    def normalize(self):
        self.silver += self.bronze // 10
        self.bronze = self.bronze % 10
        self.gold += self.silver // 100
        self.silver = self.silver % 100

    def add_bronze(self, amount: int):
        self.bronze += amount
        self.normalize()

    def total_value(self):
        return self.gold * 10000 + self.silver * 100 + self.bronze

    def __str__(self):
        return f"üí∞ –ó–æ–ª–æ—Ç–æ: {self.gold} | –°–µ—Ä–µ–±—Ä–æ: {self.silver} | –ë—Ä–æ–Ω–∑–∞: {self.bronze}"

class Weapon(Item):
    def __init__(self, name: str, description: str, damage: int):
        super().__init__(name, description, "–æ—Ä—É–∂–∏–µ")
        self.damage = damage

class Armor(Item):
    def __init__(self, name: str, description: str, defense: int):
        super().__init__(name, description, "–±—Ä–æ–Ω—è")
        self.defense = defense

class Monster:
    def __init__(self, name: str, health: int, min_damage: int, max_damage: int):
        self.name = name
        self.health = health
        self.min_damage = min_damage
        self.max_damage = max_damage

    def attack_player(self):
        return random.randint(self.min_damage, self.max_damage)

class Backpack:
    def __init__(self, size: int):
        self.size = size
        self.slots = []

    def add_item(self, item: Item, quantity: int = 1):
        if len(self.slots) >= self.size:
            raise ValueError("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω")

        if item.item_type in ["–æ—Ä—É–∂–∏–µ", "–±—Ä–æ–Ω—è"]:
            self.slots.append({"item": item, "quantity": 1})
        else:
            added = False
            for slot in self.slots:
                if slot["item"].name == item.name and slot["quantity"] < 100:
                    slot["quantity"] += quantity
                    added = True
                    break
            if not added:
                self.slots.append({"item": item, "quantity": quantity})

    def get_category_items(self, category: str):
        return [slot for slot in self.slots if slot["item"].item_type == category]

class Player:
    def __init__(self, user_id: int, name: str):
        self.user_id = user_id
        self.name = name
        self.backpack = Backpack(size=12)
        self.currency = Currency()
        self.total_damage = 0
        self.monsters_killed = 0
        self.current_monster = None
        self.health = 100
        self.encountered_monsters = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
        self.battle_log = []  # –õ–æ–≥ –±–æ—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        self.add_item(Weapon("–ú–µ—á", "–û—Å—Ç—Ä—ã–π –º–µ—á", 10))

    def add_item(self, item: Item, quantity: int = 1):
        try:
            self.backpack.add_item(item, quantity)
            return True
        except ValueError:
            return False

    def take_damage(self, damage: int):
        self.health -= damage
        if self.health < 0:
            self.health = 0

    def is_alive(self):
        return self.health > 0

    def heal(self, amount: int):
        self.health += amount
        if self.health > 100:
            self.health = 100

    def add_to_battle_log(self, message: str):
        self.battle_log.append(message)

    def clear_battle_log(self):
        self.battle_log = []

class GameStates(StatesGroup):
    MAIN_MENU = State()
    INVENTORY = State()
    FIGHT = State()
    ADMIN_MENU = State()

players = {}
ADMIN_IDS = [5693659771, 1135853083]
monsters_list = [
    Monster("–ì–æ–±–ª–∏–Ω", 50, 5, 10),
    Monster("–û—Ä–∫", 80, 10, 15),
    Monster("–î—Ä–∞–∫–æ–Ω", 150, 20, 30),
    Monster("–ú–µ—á—Ç–∞ SLB", 490000, 9000, 30000)
]

TG_TOKEN = '7753644115:AAFm5eVYosykGc98IYKenkkwoUQT7HujWsk'
bot = Bot(token=TG_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_inline():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–∞", callback_data="summon_monster"),
        InlineKeyboardButton(text="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_top_menu")
    )
    builder.row(
        InlineKeyboardButton(text="–ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu"),
        InlineKeyboardButton(text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="open_inv")
    )
    return builder.as_markup()

def inventory_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–û—Ä—É–∂–∏–µ", callback_data="inv_–æ—Ä—É–∂–∏–µ"),
        InlineKeyboardButton(text="–ë—Ä–æ–Ω—è", callback_data="inv_–±—Ä–æ–Ω—è")
    )
    builder.row(
        InlineKeyboardButton(text="–õ—É—Ç", callback_data="inv_–ª—É—Ç"),
        InlineKeyboardButton(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="inv_–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return builder.as_markup()

def get_player_info(player: Player):
    return (
        f"üë§ {player.name}\n"
        f"üÜî ID: {player.user_id}\n"
        f"üí• –£—Ä–æ–Ω: {player.total_damage}\n"
        f"üëæ –£–±–∏—Ç–æ: {player.monsters_killed}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}\n"
        f"{player.currency}\n"
        f"üéí –°–ª–æ—Ç–æ–≤: {len(player.backpack.slots)}/{player.backpack.size}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.from_user.full_name
    if user_id not in players:
        players[user_id] = Player(user_id, name)
    player = players[user_id]

    print(f"Player {player.name} inventory: {player.backpack.slots}")

    text = get_player_info(player) + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(text, reply_markup=main_menu_inline())
    await state.set_state(GameStates.MAIN_MENU)

@dp.callback_query(lambda c: c.data == "open_inv")
async def show_inventory(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:",
        reply_markup=inventory_inline_keyboard()
    )
    await state.set_state(GameStates.INVENTORY)

@dp.callback_query(lambda c: c.data.startswith("inv_"))
async def show_category(callback: types.CallbackQuery):
    player = players[callback.from_user.id]
    category = callback.data.split("_")[1]

    if category == "currency":
        text = f"–í–∞–ª—é—Ç–∞:\n{player.currency}"
    else:
        items = player.backpack.get_category_items(category)
        print(f"Items in {category}: {items}")
        text = f"üîπ {category.capitalize()}:\n" + "\n".join([f"{i+1}. {item['item'].name} ({item['quantity']})" for i, item in enumerate(items)]) if items else "–ü—É—Å—Ç–æ"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="open_inv")]])
    )

@dp.callback_query(lambda c: c.data == "summon_monster", GameStates.MAIN_MENU)
async def summon_monster(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    if player.current_monster:
        await callback.answer("–í—ã —É–∂–µ —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å –º–æ–Ω—Å—Ç—Ä–æ–º!")
        return

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –º–æ–Ω—Å—Ç—Ä–∞
    await callback.answer("–ò—â–µ–º –º–æ–Ω—Å—Ç—Ä–∞...")
    await asyncio.sleep(random.randint(5, 30))

    monster = random.choice(monsters_list)
    player.current_monster = monster
    player.clear_battle_log()  # –û—á–∏—â–∞–µ–º –ª–æ–≥ –±–æ—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –±–æ–µ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Å —ç—Ç–∏–º –º–æ–Ω—Å—Ç—Ä–æ–º —Ä–∞–Ω–µ–µ
    is_first_encounter = monster.name not in player.encountered_monsters
    if is_first_encounter:
        player.encountered_monsters.add(monster.name)

    if is_first_encounter:
        text = f"ü¶ñ –ü–æ—è–≤–∏–ª—Å—è –º–æ–Ω—Å—Ç—Ä: {monster.name}\n‚ùì –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã"
    else:
        text = f"ü¶ñ –ü–æ—è–≤–∏–ª—Å—è –º–æ–Ω—Å—Ç—Ä: {monster.name}\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster.health}\n‚öîÔ∏è –£—Ä–æ–Ω: {monster.min_damage}-{monster.max_damage}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–º –º–æ–Ω—Å—Ç—Ä–∞
    await callback.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –±–æ–π", callback_data="accept_fight")],
            [InlineKeyboardButton(text="–°–±–µ–∂–∞—Ç—å", callback_data="escape")]
        ])
    )
    await state.set_state(GameStates.FIGHT)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FIGHT

@dp.callback_query(lambda c: c.data == "accept_fight", GameStates.FIGHT)
async def accept_fight(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    monster = player.current_monster

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –±–æ—è –≤ –ª–æ–≥
    player.add_to_battle_log(f"ü¶ñ –ù–∞—á–∞–ª–æ –±–æ—è —Å {monster.name}!")

    await callback.message.edit_text(
        f"ü¶ñ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å {monster.name}!\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞: {monster.health}\n‚öîÔ∏è –£—Ä–æ–Ω: {monster.min_damage}-{monster.max_damage}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_monster")],
            [InlineKeyboardButton(text="–°–±–µ–∂–∞—Ç—å", callback_data="escape")]
        ])
    )
    await state.set_state(GameStates.FIGHT)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è FIGHT

@dp.callback_query(lambda c: c.data == "attack_monster", GameStates.FIGHT)
async def attack_monster(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    monster = player.current_monster
    weapon = next((slot["item"] for slot in player.backpack.slots if isinstance(slot["item"], Weapon)), None)
    if not weapon:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ä—É–∂–∏—è!")
        return

    damage = weapon.damage
    monster.health -= damage
    player.total_damage += damage

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ –≤ –ª–æ–≥
    player.add_to_battle_log(f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞ –º–æ–Ω—Å—Ç—Ä—É {monster.name}!")

    if monster.health <= 0:
        player.monsters_killed += 1
        player.current_monster = None
        player.currency.add_bronze(random.randint(10, 50))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–µ –≤ –ª–æ–≥
        player.add_to_battle_log(f"üéâ –ú–æ–Ω—Å—Ç—Ä {monster.name} –ø–æ–±–µ–∂–¥–µ–Ω!")
        player.add_to_battle_log(f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {random.randint(10, 50)} –±—Ä–æ–Ω–∑–æ–≤—ã—Ö –º–æ–Ω–µ—Ç!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è
        battle_summary = "\n".join(player.battle_log)
        await callback.message.edit_text(
            f"üéâ –ú–æ–Ω—Å—Ç—Ä {monster.name} –ø–æ–±–µ–∂–¥–µ–Ω!\n{battle_summary}",
            reply_markup=main_menu_inline()
        )
        await state.set_state(GameStates.MAIN_MENU)
    else:
        monster_damage = monster.attack_player()
        player.take_damage(monster_damage)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –ª–æ–≥
        player.add_to_battle_log(f"ü¶ñ –ú–æ–Ω—Å—Ç—Ä {monster.name} –Ω–∞–Ω–µ—Å –≤–∞–º {monster_damage} —É—Ä–æ–Ω–∞!")

        if not player.is_alive():
            # –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ —Å 50% –∑–¥–æ—Ä–æ–≤—å—è
            player.heal(50)

            # –û—Ç–Ω–∏–º–∞–µ–º 10% –æ—Ç –≤—Å–µ—Ö –¥–µ–Ω–µ–≥
            total_currency = player.currency.total_value()
            lost_currency = int(total_currency * 0.1)
            player.currency = Currency()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
            player.currency.add_bronze(total_currency - lost_currency)

            # –®–∞–Ω—Å 10% –Ω–∞ –ø–æ—Ç–µ—Ä—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            if random.random() < 0.1 and player.backpack.slots:
                lost_item = random.choice(player.backpack.slots)
                player.backpack.slots.remove(lost_item)
                lost_item_name = lost_item["item"].name
                lost_item_quantity = lost_item["quantity"]
                player.add_to_battle_log(f"üéí –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {lost_item_name} ({lost_item_quantity} —à—Ç.).")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è –∏ —Å–º–µ—Ä—Ç—å
            battle_summary = "\n".join(player.battle_log)
            await callback.message.edit_text(
                f"üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –±–æ—é —Å {monster.name}!\n"
                f"üîÑ –í—ã –≤–æ—Å–∫—Ä–µ—à–µ–Ω—ã —Å 50% –∑–¥–æ—Ä–æ–≤—å—è.\n"
                f"üí∞ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 10% —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥.\n"
                f"{battle_summary}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–Ω—É—Ç—å", callback_data="resurrect")]
                ])
            )
            await state.set_state(GameStates.MAIN_MENU)
        else:
            await callback.message.edit_text(
                f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞. ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞: {monster.health}\n"
                f"ü¶ñ –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {monster_damage} —É—Ä–æ–Ω–∞!\n"
                f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.health}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_monster")],
                    [InlineKeyboardButton(text="–°–±–µ–∂–∞—Ç—å", callback_data="escape")]
                ])
            )

@dp.callback_query(lambda c: c.data == "escape", GameStates.FIGHT)
async def escape_monster(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    if player.current_monster:
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É —Å–±–µ–∂–∞—Ç—å
        health_loss = int(player.health * random.randint(1, 15) / 100)
        player.take_damage(health_loss)
        player.current_monster = None

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–≥–µ –≤ –ª–æ–≥
        player.add_to_battle_log(f"üèÉ‚Äç‚ôÇÔ∏è –í—ã —Å–±–µ–∂–∞–ª–∏ –æ—Ç –º–æ–Ω—Å—Ç—Ä–∞, –ø–æ—Ç–µ—Ä—è–≤ {health_loss} –∑–¥–æ—Ä–æ–≤—å—è!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è
        battle_summary = "\n".join(player.battle_log)
        await callback.message.edit_text(
            f"{battle_summary}",
            reply_markup=main_menu_inline()
        )
    else:
        await callback.message.edit_text(
            get_player_info(player),
            reply_markup=main_menu_inline()
        )
    await state.set_state(GameStates.MAIN_MENU)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@dp.callback_query(lambda c: c.data == "resurrect")
async def resurrect(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    player.heal(50)  # –í–æ—Å–∫—Ä–µ—à–∞–µ–º —Å 50% –∑–¥–æ—Ä–æ–≤—å—è
    await callback.message.edit_text(
        f"üîÑ –í—ã –≤–æ—Å–∫—Ä–µ—à–µ–Ω—ã —Å 50% –∑–¥–æ—Ä–æ–≤—å—è.",
        reply_markup=main_menu_inline()
    )
    await state.set_state(GameStates.MAIN_MENU)

@dp.callback_query(lambda c: c.data == "back_main")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    player = players[callback.from_user.id]
    await callback.message.edit_text(
        get_player_info(player) + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_inline()
    )
    await state.set_state(GameStates.MAIN_MENU)

@dp.callback_query(lambda c: c.data == "show_top_menu")
async def show_top_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–¢–æ–ø –ø–æ —É—Ä–æ–Ω—É", callback_data="top_damage"),
        InlineKeyboardButton(text="–¢–æ–ø –ø–æ —É–±–∏–π—Å—Ç–≤–∞–º", callback_data="top_kills")
    )
    builder.row(
        InlineKeyboardButton(text="–¢–æ–ø –ø–æ –≤–∞–ª—é—Ç–µ", callback_data="top_currency"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")
    )
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("top_"))
async def show_top(callback: types.CallbackQuery):
    global players
    top_type = callback.data.split("_")[1]
    top_text = "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–∞"

    if top_type == "damage":
        top_players = sorted(players.values(), key=lambda p: p.total_damage, reverse=True)
        top_text = "üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–Ω—É:\n" + "\n".join([f"{i + 1}. {p.name}: {p.total_damage} —É—Ä–æ–Ω–∞" for i, p in enumerate(top_players[:10])])
    elif top_type == "kills":
        top_players = sorted(players.values(), key=lambda p: p.monsters_killed, reverse=True)
        top_text = "üèÜ –¢–æ–ø –ø–æ —É–±–∏–π—Å—Ç–≤–∞–º:\n" + "\n".join([f"{i + 1}. {p.name}: {p.monsters_killed} —É–±–∏–π—Å—Ç–≤" for i, p in enumerate(top_players[:10])])
    elif top_type == "currency":
        top_players = sorted(players.values(), key=lambda p: p.currency.total_value(), reverse=True)
        top_text = "üèÜ –¢–æ–ø –ø–æ –≤–∞–ª—é—Ç–µ:\n" + "\n".join([f"{i + 1}. {p.name}: {p.currency}" for i, p in enumerate(top_players[:10])])

    await callback.message.edit_text(
        top_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="show_top_menu")]])
    )

@dp.callback_query(lambda c: c.data == "admin_menu")
async def admin_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é!")
        return
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ—Ä—É–∂–∏–µ", callback_data="add_weapon"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω—é", callback_data="add_armor")
    )
    builder.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="add_materials")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")
    )
    await callback.message.edit_text(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(GameStates.ADMIN_MENU)

@dp.callback_query(lambda c: c.data == "add_weapon", GameStates.ADMIN_MENU)
async def add_weapon(callback: types.CallbackQuery):
    player = players[callback.from_user.id]
    weapon = Weapon("–ú–µ—á", "–û—Å—Ç—Ä—ã–π –º–µ—á", 10)
    if player.add_item(weapon):
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ä—É–∂–∏–µ: –ú–µ—á")
    else:
        await callback.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")

@dp.callback_query(lambda c: c.data == "add_armor", GameStates.ADMIN_MENU)
async def add_armor(callback: types.CallbackQuery):
    player = players[callback.from_user.id]
    armor = Armor("–©–∏—Ç", "–ü—Ä–æ—á–Ω—ã–π —â–∏—Ç", 5)
    if player.add_item(armor):
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∞ –±—Ä–æ–Ω—è: –©–∏—Ç")
    else:
        await callback.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")

@dp.callback_query(lambda c: c.data == "add_currency", GameStates.ADMIN_MENU)
async def add_currency(callback: types.CallbackQuery):
    player = players[callback.from_user.id]
    player.currency.add_bronze(100)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ 100 –±—Ä–æ–Ω–∑–æ–≤—ã—Ö –º–æ–Ω–µ—Ç!")

@dp.callback_query(lambda c: c.data == "add_materials", GameStates.ADMIN_MENU)
async def add_materials(callback: types.CallbackQuery):
    player = players[callback.from_user.id]
    materials = Item("–î–µ—Ä–µ–≤–æ", "–ü—Ä–æ—á–Ω–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    if player.add_item(materials, quantity=50):
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ 50 –µ–¥–∏–Ω–∏—Ü –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –î–µ—Ä–µ–≤–æ")
    else:
        await callback.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())